/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   211112VectorIntroSimpleCode.cpp                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: areggie <areggie@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/11/12 18:52:00 by areggie           #+#    #+#             */
/*   Updated: 2021/11/12 19:11:37 by areggie          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/*

https://www.youtube.com/watch?v=1cKvMZOJeeE

Тема лекции на Simple code
#120
vector | Библиотека стандартных шаблонов (stl) | Уроки | C++ | #1
код можно позже записать

*/

/*
	БЕЗ ИТЕРАТОРА
	vector.at(1), переход к элементу массива (с проверкой за выход из массива)
	но его минус - долго работает потому что все время проверяет выход за массив
	vector.clear(), очистка от всех элементов массива
	vector.pushback(), добавление элемента в конец массива
	vector.popback(), удаление последнего элемента массива
	vector.size()  - подсчет элементов в дин массиве без терм нуля (ячеек в массиве система может выделить и больше)
	vector.capacity() - подсчет выделенных под дин массив ячеек (больше чем фактич элементов в массиве) те  факт емкость
	vector.reserve(100) - создание массива с факт емкостью 100 
	vector.shrink_to_fit() - сжатие факт емкости до размера фактически используемых ячеек  
	vector(20, 55)  - создать массив из 20 элементов и записать туда 55 в каждую
	vector.empty()  - проверка наличия элементов в массиве (false = есть, true = пусто)
	vector.resize(20, 44) - изменить размер массива на нужный размер и заполнить

	ИТЕРАТОР
	vector.insert() - работа через итератор - вставка в любом месте массива
	vector.erase() - работа через итератор - удаление элемента из массива
*/