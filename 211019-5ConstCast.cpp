/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   211019-5ConstCast.cpp                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: areggie <areggie@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/10/19 16:02:34 by areggie           #+#    #+#             */
/*   Updated: 2021/10/19 16:09:17 by areggie          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include <iostream>

/*
Источник: https://ci-plus-plus-snachala.ru/?p=4964



Операция const_cast — это операция снятия константности или добавления 
константности при преобразовании типа.

На самом деле при любом преобразовании переменная, которую приводят к какому-то типу, 
остаётся той переменной, какой она была. 

На основе оригинальной переменной создаётся временная переменная, 
тип для которой подхватывается из типа оригинальной переменной. 
Вот отбрасыванием const или добавлением const к типу временной 
переменной операция const_cast и занимается.

Операция const_cast позволяет выполнить приведение типа только 
если значение объявлено как const или volatile.
const_cast возможно использовать, если тип, 
к которому выражение приводится, такой же, как у самого выражения,
не учитывая квалификаторы const/volatile.
*/

using namespace std;
 
int main()
{
    const int i = 100;
    const int *ptr = &i;
 
    int * pi = const_cast<int*>(&i);	//Снятие const с переменной, на которую указывает pi
    (*pi) = 200;						//Изменение переменной, которая обозначена const
 
    cout << (void*)&i << '\t' << i << '\n';	//На экране можно увидеть один адрес
    cout << (void*)pi << '\t' << *pi << '\n'; //Но разные значения
}

/*
В данной ситуации const_cast снимает константность при преобразовании типа.
 Поскольку переменная i была изначально константной, 
 её адрес имел тип const int*. 
 Благодаря const_cast с типа адреса была снята константность, 
 и его стало возможно поместить в переменную, на которую указывает b,
  где эта переменная есть не const целое число. 
  Значение i на самом деле изменяется. 
То, что на экран выводится её предыдущее значение (в некоторых, но не во всех компиляторах) — результат некорректной работы оптимизатора,
который ошибочно предположил, что объявленная как const переменная i изменяться не будет,
и подставил то значение, которое указано ещё при инициализации.
*/