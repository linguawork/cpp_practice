/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   211010-0Many_Throws_Catches.cpp                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: areggie <areggie@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/10/10 17:40:54 by areggie           #+#    #+#             */
/*   Updated: 2021/10/12 18:16:37 by areggie          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/*

https://www.youtube.com/watch?v=guLK7Up6Kmc

лекция на Simple Code 122
*/

/*
Несколько блоков catch. 
Обработка исключений С++. 
Изучение С++ для начинающих. 
Урок #122
*/

/*
Этот урок к CPP day05

В продолжение лекции 120, 121 о Try and Catch
*/


/*
https://ravesli.com/urok-185-klassy-isklyucheniya-i-nasledovanie/#toc-4

об интерфейсном классе exception можно здесь почитать

*/

#include <iostream>
#include <string>
#include <fstream>


 /* ПЕРВЫЙ ВАРИАНТ КОДА */ //кидаем строку но ловим уже типом данных КЛАСС EXCEPTION
// программа вылетает не отловив ничего и поэтому можно писать несколько вариантов CATCH см вариант ниже
// void Foo (int value)
// {
	
// 	if (value < 0) 
// 		// throw std::exception("Число меньше 0!"); 
// 		throw "Число меньше 0!!!!!"; //кидание исключения типа данных CHAR
	
// 	std::cout << "Переменная = " << value << std::endl;
// }

// int main()
// { 
// 	setlocale (LC_ALL, "ru");
	
// 	try
// 	{
// 		Foo(-55); 
	
// 	}
// 	catch( std::exception &excep ) 


// 	{
// 		std::cerr << "Мы поймали " << excep.what() << '\n';// метод what выведет то что принимает класс Exception когда его  кинули
// 	}
// 	return 0;
// }


 /* ВТОРОЙ ВАРИАНТ КОДА */ //кидаем строку но ловим уже типом данных КЛАСС EXCEPTION
// и типом данных CHAR
// CATCH будет работать до первого подходящего типа данных
// void Foo (int value)
// {
	
// 	if (value < 0) 
// 		// throw std::exception("Число меньше 0!"); 
// 		throw "Число меньше 0!!!!!"; //кидание исключения типа данных CHAR
	
// 	std::cout << "Переменная = " << value << std::endl;
// }

// int main()
// { 
// 	setlocale (LC_ALL, "ru");
	
// 	try
// 	{
// 		Foo(-55); 
	
// 	}
// 	catch( std::exception &excep ) // строку здесь не поймаем но можно сделать ещё один CATCH
// 	{
// 		std::cerr << "Блок 1 Мы поймали " << excep.what() << '\n';// метод what выведет то что принимает класс Exception когда его  кинули
// 	}

// 	catch(const char *excep ) //Этот Catch должен поймать строку
// 	{
// 		std::cerr << "Блок 2 Мы поймали " << excep << '\n';//так как здесь не объект то просто указатель на первый эл
// 		// ./a.out                                
// 		// Блок 2 Мы поймали Число меньше 0!!!!!
// 	}
// 	return 0;
// }


 /* ТРЕТИЙ ВАРИАНТ КОДА */ //кидаем строку но ловим уже типом данных КЛАСС EXCEPTION
// и типом данных CHAR
// CATCH будет работать до первого подходящего типа данных
// здесь добавим еще один throw c условием когда value = 0
// void Foo (int value)
// {
	
// 	if (value < 0) 
// 		// throw std::exception("Число меньше 0!"); 
// 		throw "Число меньше 0!!!!!"; //кидание исключения типа данных CHAR
	
// 	if (value == 0) 
// 	throw std::exception(); // намеренно убрал строку "Число меньше 0!!!!!" так как на Линуксе нет конструктора
// 	// принимающего char а на Винде есть

	
// 	std::cout << "Переменная = " << value << std::endl;
// }

// int main()
// { 
// 	setlocale (LC_ALL, "ru");
	
// 	try
// 	{
// 		Foo(-55); 
	
// 	}
// 	catch( std::exception &excep ) // строку здесь не поймаем но можно сделать ещё один CATCH
// 	{
// 		std::cerr << "Блок 1 Мы поймали " << excep.what() << '\n';// метод what выведет то что принимает класс Exception когда его  кинули
// 	}

// 	catch(const char *excep ) //Этот Catch должен поймать строку
// 	{
// 		std::cerr << "Блок 2 Мы поймали " << excep << '\n';//так как здесь не объект то просто указатель на первый эл
// 		// ./a.out                                
// 		// Блок 2 Мы поймали Число меньше 0!!!!!
// 	}
// 	return 0;
// }

/* ЧЕТВЕРТЫЙ ВАРИАНТ КОДА */ //кидаем строку но ловим уже типом данных КЛАСС EXCEPTION
// и типом данных CHAR
// CATCH будет работать до первого подходящего типа данных
// здесь добавим еще один throw c условием когда value = 0
// здесь в Foo подадим 0
// void Foo (int value)
// {
	
// 	if (value < 0) 
// 		// throw std::exception("Число меньше 0!"); 
// 		throw "Число меньше 0!!!!!"; //кидание исключения типа данных CHAR
	
// 	if (value == 0) 
// 	throw std::exception(); // намеренно убрал строку "Число меньше 0!!!!!" так как на Линуксе нет конструктора
// 	// принимающего char а на Винде есть

	
// 	std::cout << "Переменная = " << value << std::endl;
// }

// int main()
// { 
// 	setlocale (LC_ALL, "ru");
	
// 	try
// 	{
// 		Foo(0); 
	
// 	}
// 	catch( std::exception &excep ) // строку здесь не поймаем но можно сделать ещё один CATCH
// 	{
// 		std::cerr << "Блок 1 Мы поймали " << excep.what() << '\n';// метод what выведет то что принимает класс Exception когда его  кинули
// 		//Блок 1 Мы поймали std::exception
// 	}

// 	catch(const char *excep ) //Этот Catch должен поймать строку
// 	{
// 		std::cerr << "Блок 2 Мы поймали " << excep << '\n';//так как здесь не объект то просто указатель на первый эл
		
// 	}
// 	return 0;
// }


/* ПЯТЫЙ ВАРИАНТ КОДА */ //кидаем строку но ловим уже типом данных КЛАСС EXCEPTION
// и типом данных CHAR
// CATCH будет работать до первого подходящего типа данных
// здесь добавим еще один throw c условием когда value = 0

// здесь добавим еще один throw c условием, когда value = 1
// здесь в Foo подадим 1

void Foo (int value)
{
	if (value < 0) 
		// throw std::exception("Число меньше 0!"); 
		throw "Число меньше 0!!!!!"; //кидание исключения типа данных CHAR
	
	if (value == 0) 
		throw std::exception(); // намеренно убрал строку "Число меньше 0!!!!!" так как на Линуксе нет конструктора
		// принимающего char а на Винде есть

	if (value == 1) 
		throw 1; // бросаем просто единицу
}

int main()
{ 
	setlocale (LC_ALL, "ru");
	
	try
	{
		Foo(1); 
	
	}
	catch( std::exception &excep ) // строку здесь не поймаем но можно сделать ещё один CATCH
	{
		std::cerr << "Блок 1 Мы поймали " << excep.what() << '\n';// метод what выведет то что принимает класс Exception когда его  кинули
		//Блок 1 Мы поймали std::exception
	}
	catch(const char *excep ) //Этот Catch должен поймать строку
	{
		std::cerr << "Блок 2 Мы поймали " << excep << '\n';//так как здесь не объект то просто указатель на первый эл
		
	}
	catch(...) //Этот Catch должен поймать все, что угодно исключая первые два CATCH
	// сюда попадает всё подряд
	{
		std::cerr << "Что-то пошло не так" <<  '\n';//так как здесь не объект то просто указатель на первый эл
	}
	return 0;
}







/* ШЕСТОЙ ВАРИАНТ КОДА */ //кидаем строку но ловим уже типом данных КЛАСС EXCEPTION
// и типом данных CHAR
// CATCH будет работать до первого подходящего типа данных


// в четвертом варианте добавим еще один throw c условием когда value = 0

// в пятом варианте добавим еще один throw c условием, когда value = 1
// здесь в Foo подадим 1

// в шестом варианте блок catch (...) поместим раньше других, и он будет перехватывать все
// здесь важен порядок и компилятор на Мак подскажет, что всеядный catch должен стоять самым последним


// void Foo (int value)
// {
// 	if (value < 0) 
// 		// throw std::exception("Число меньше 0!"); 
// 		throw "Число меньше 0!!!!!"; //кидание исключения типа данных CHAR
	
// 	if (value == 0) 
// 		throw std::exception(); // намеренно убрал строку "Число меньше 0!!!!!" так как на Линуксе нет конструктора
// 		// принимающего char а на Винде есть

// 	if (value == 1) 
// 		throw 1; // бросаем просто единицу
// }

// int main()
// { 
// 	setlocale (LC_ALL, "ru");
	
// 	try
// 	{
// 		Foo(1); 
	
// 	}
// 	catch(...) //Этот Catch должен поймать все, что угодно исключая первые два CATCH
// 	// сюда попадает всё подряд
// 	{
// 		std::cerr << "Что-то пошло не так" <<  '\n';//так как здесь не объект то просто указатель на первый эл
// 	}
// 	catch( std::exception &excep ) // строку здесь не поймаем но можно сделать ещё один CATCH
// 	{
// 		std::cerr << "Блок 1 Мы поймали " << excep.what() << '\n';// метод what выведет то что принимает класс Exception когда его  кинули
// 		//Блок 1 Мы поймали std::exception
// 	}
// 	catch(const char *excep ) //Этот Catch должен поймать строку
// 	{
// 		std::cerr << "Блок 2 Мы поймали " << excep << '\n';//так как здесь не объект то просто указатель на первый эл
		
// 	}

// 	return 0;
// }