/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   211009-2Throw.cpp                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: areggie <areggie@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/10/10 00:33:48 by areggie           #+#    #+#             */
/*   Updated: 2021/10/11 22:15:45 by areggie          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/*
https://www.youtube.com/watch?v=FhlGFJ_zdKM
Throw
лекция на Simple Code 121

*/

/*
Генерация исключений с++ пример. 
throw c++ пример. 
Изучение С++ для начинающих. 
Урок #121
*/

/*
Этот урок к CPP day05

В продолжение лекции 120 о Try and Catch
*/

/*
Обработка исключений. THROW
*/




#include <iostream>
#include <string>
#include <fstream>


// /* ПЕРВЫЙ ВАРИАНТ КОДА*/
// void Foo (int value)
// {
	
// 	if (value < 0) // условие при котором ты кидаешь исключение
// 		throw value;  //кидание исключения типа данных INT
	
// 	std::cout << "Переменная = " << value << std::endl;
// }

// int main()
// { 
// 	setlocale (LC_ALL, "ru");
	
// 	Foo(55);
	
// 	return 0;
// }






// /* ВТОРОЙ ВАРИАНТ КОДА*/
// void Foo (int value)
// {
	
// 	if (value < 0) // условие при котором ты кидаешь исключение
// 		throw value;  //кидание исключения типа данных INT
	
// 	std::cout << "Переменная = " << value << std::endl;
// }

// int main()
// { 
// 	setlocale (LC_ALL, "ru");
	
// 	Foo(-55); // при подаче отрицат числа было выброшено исключение
// 	// программа прервалась так как исключение не было поймано
// 	// и чтобы его поймать нужен блок Try Catch (см след вариант)
	
// 	return 0;
// }




/* ТРЕТИЙ ВАРИАНТ КОДА */
// void Foo (int value)
// {
	
// 	if (value < 0) // условие при котором ты кидаешь исключение
// 		throw value;  //кидание исключения типа данных INT
	
// 	std::cout << "Переменная = " << value << std::endl;
// }

// int main()
// { 
// 	setlocale (LC_ALL, "ru");
	
// 	try
// 	{
// 		Foo(-55); // пробуем на ошибку и ловим если есть, блок Try Catch (см след вариант)
// 	}
// 	catch(const int exception) // в скобках мы должны написать тот тип переменных, которую мы отлавливаем
// 	{
// 		std::cerr << "Мы поймали " << exception << '\n';
// 	}
	
	
// 	return 0;
// }






// /* ЧЕТВЕРТЫЙ ВАРИАНТ КОДА */
// void Foo (int value)
// {
	
// 	if (value < 0) // условие при котором ты кидаешь исключение
// 		throw value; //кидание исключения типа данных INT
	
// 	std::cout << "Переменная = " << value << std::endl;
// }

// int main()
// { 
// 	setlocale (LC_ALL, "ru");
	
// 	try
// 	{
// 		Foo(55); // пробуем на ошибку и ловим если есть, блок Try Catch (см след вариант)
// 		// так как цифра здесь не отриц то ошибки не будет
// 	}
// 	catch(const int exception) // в скобках мы должны написать тот тип переменных, которую мы отлавливаем
// 	{
// 		std::cerr << "Мы поймали " << exception << '\n';
// 	}
// 	return 0;
// }




// /* ПЯТЫЙ ВАРИАНТ КОДА */ //кидаем строку но ловим ИНТ
// void Foo (int value)
// {
	
// 	if (value < 0) // условие при котором ты кидаешь исключение
// 		throw "Число меньше 0!!!!!"; //кидание исключения типа данных INT
	
// 	std::cout << "Переменная = " << value << std::endl;
// }

// int main()
// { 
// 	setlocale (LC_ALL, "ru");
	
// 	try
// 	{
// 		Foo(-55); // пробуем на ошибку и ловим если есть, блок Try Catch (см след вариант)
	
// 	}
// 	catch(const int exception) // в скобках мы должны написать тот тип переменных, которую мы отлавливаем
// 	// так как выше кинули строку то и отловить мы должны строку иначе не программа вылетит без пойманного исключения:
// 	// ./a.out                  
// 	// libc++abi.dylib: terminating with uncaught exception of type char const*
// 	// [1]    14955 abort      ./a.out
// 	{
// 		std::cerr << "Мы поймали " << exception << '\n';
// 	}
// 	return 0;
// }




// /* ШЕСТОЙ ВАРИАНТ КОДА */ //кидаем строку но ловим уже строку
// void Foo (int value)
// {
	
// 	if (value < 0) // условие при котором ты кидаешь исключение
// 		throw "Число меньше 0!!!!!"; //кидание исключения типа данных CHAR
	
// 	std::cout << "Переменная = " << value << std::endl;
// }

// int main()
// { 
// 	setlocale (LC_ALL, "ru");
	
// 	try
// 	{
// 		Foo(-55); // пробуем на ошибку и ловим если есть, блок Try Catch (см след вариант)
	
// 	}
// 	catch(const char *exception) 
// 	// так как выше кинули строку то и отловить мы должны строку иначе не программа вылетит без пойманного исключения:
// 	// пишем указатель на char таким образом передавая адрес первого символа и COUT будет выводить пока не встретит термин ноль

// 	{
// 		std::cerr << "Мы поймали " << exception << '\n';
// 		//Мы поймали Число меньше 0!!!!!
// 	}
// 	return 0;
// }




/* Седьмой ВАРИАНТ КОДА */ //кидаем  КЛАСС EXCEPTION (Это более универсальный подход для обработки ошибок)
// Класс EXCEPTION является базовым классом который имеет наследников обработчиков ошибок
// так как он базовый его мы можем кидать а ловить можем классами наследниками
// ПРЕДПОЧТИТЕЛЬНЕЙ ИСПОЛЬЗОВАТЬ класс EXCEPTION
// у меня конструктор EXCEPTION (не видит принимаему строку)



void Foo (int value)
{
	
	if (value < 0) // условие при котором ты кидаешь исключение
		throw std::exception(); //кидание исключения типа класс EXCEPTION которыы принимает строку
		// а дело в том, что на Windows конструктор класса exception () может принимать строку
		// а на Маке и на Линуксе не может принимать
		// если подавать без строки, то сработает

	std::cout << "Переменная = " << value << std::endl;
}

int main()
{ 
	setlocale (LC_ALL, "ru");
	
	try
	{
		Foo(-55); // пробуем на ошибку и ловим если есть, блок Try Catch (см след вариант)
	
	}
	catch( std::exception &excep ) // ловим конст ссылку на объект класса exception


	{
		std::cerr << "Мы поймали " << excep.what() << '\n';// метод what выведет то что принимает класс Exception когда его  кинули
	}
	return 0;
}
