/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   0925Nasledovanie.cpp                               :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: areggie <areggie@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/09/25 21:56:52 by areggie           #+#    #+#             */
/*   Updated: 2021/09/26 15:32:16 by areggie          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */


/* 
https://www.youtube.com/watch?v=O7ruEWCa7zc&t=639s
// лекция на Simple Code 98

https://www.youtube.com/watch?v=6udKffus77A
// лекция на Simple Code 99

https://www.youtube.com/watch?v=sNInKQgUZMA
// лекция на Simple Code 100

https://www.youtube.com/watch?v=S_owqPD5dVk
// лекция на Simple Code 101

https://www.youtube.com/watch?v=3Z_Xj2KfsFU
// лекция на Simple Code 102

/*


Наследование в ООП пример. Что такое наследование.
Для чего нужно наследование классов. 
ООП. C++ #98

Модификаторы доступа при наследовании. 
private public protected Спецификаторы доступа. 
ООП. C++ #99


Порядок вызова конструкторов при наследовании. 
Как вызываются конструкторы. 
ООП C++ Начинающим #100


Порядок вызова деструкторов при наследовании.
Деструкторы. ООП C++ Для начинающих.
Урок #101

Вызов конструктора базового класса из конструктора класса-наследника. 
Наследование. 
ООП C++ #102

*/



/*
 Суть: мы можем наследовать и присваивать в свой класс все public поля 
 из другого класса через : public
 Не прописывая эти поля в классе дополнительно
 
 example:
 class Professor: class Human 
 {
	public:
		string subject; 
 }

 Если есть приватные поля, то к ним можно обращаться через Getters and Setters


Конструкторы при наследовании вызываются в прямом порядке

Деструкторы при наследовании вызываются в обратном порядке

Если в базовом классе есть больше одного конструктора，
то можно вызвать один из них в явном виде через ：
 вызывая конструктор с нужными параметрами (102)
*/