/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   0930-1SpisokInicializacii.cpp                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: areggie <areggie@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/09/30 15:54:33 by areggie           #+#    #+#             */
/*   Updated: 2021/09/30 21:36:00 by areggie          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/*
https://ravesli.com/urok-117-spisok-initsializatsii-chlenov-klassa/
Статья о списках инициализации в с++ 
*/

/*
Урок №117. Список инициализации членов класса
*/

#include <iostream>
// это инициализация через присваивание // не самый оптимальный по скорости вид инициализации
class Values
{
private:
    int m_value1;
    double m_value2;
    char m_value3;
 
public:
    Values()
    {
        // Это всё операции присваивания, а не инициализация
        m_value1 = 3;
        m_value2 = 4.5;
        m_value3 = 'd';
    }
};

/* 
то же самое будет в С:

int m_value1;
double m_value2;
char m_value3;
 
m_value1 = 3;
m_value2 = 4.5;
m_value3 = 'd';

Хотя в плане синтаксиса языка C++ вопросов никаких нет — всё корректно, 
но более эффективно — использовать инициализацию, а не присваивание после объявления.
*/

//некоторые типы данных
// (например, константы и ссылки) должны быть инициализированы сразу. 

//Рассмотрим следующий пример:

class Values
{
private:
    const int m_value;
 
public:
    Values()
    {
        m_value = 3; // ошибка: константам нельзя присваивать значения
    } 
};

 //аналогично в С:

const int m_value; // ошибка: константы должны быть инициализированы значениями
m_value = 7; // ошибка: константам нельзя присваивать значения


/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Для решения этой проблемы в C++ добавили метод инициализации переменных-членов 
класса через список инициализации членов, вместо присваивания им значений 
после объявления. 

Использование списка инициализации почти
 идентично выполнению прямой инициализации (или uniform-инициализации в C++11).
*/ 
// Пример присвоения
class Values
{
private:
    int m_value1;
    double m_value2;
    char m_value3;
 
public:
    Values()
    {
        // Это всё операции присваивания, а не инициализация
        m_value1 = 3;
        m_value2 = 4.5;
        m_value3 = 'd';
    }
};

// То же самое через СПИСОК инициализации
class Values
{
private:
    int m_value1;
    double m_value2;
    char m_value3;
 
public:
    Values() : m_value1(3), m_value2(4.5), m_value3('d') 
	// напрямую инициализируем переменные-члены класса
    {
    // Нет необходимости использовать присваивание
    }
 
    void print()
    {
         std::cout << "Values(" << m_value1 << ", " << m_value2 << ", " << m_value3 << ")\n";
    }
};
 
int main()
{
    Values value;
    value.print();
    return 0;
}