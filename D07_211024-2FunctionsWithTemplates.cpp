/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   211024-2FunctionsWithTemplates.cpp                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: areggie <areggie@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/10/24 17:13:40 by areggie           #+#    #+#             */
/*   Updated: 2022/04/03 20:50:25 by areggie          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/* https://www.youtube.com/watch?v=LB83A1FIQFg&t=3s */
// лекция на Simple Code

/* 
Шаблоны функций. Шаблонные функции c++. 
template typename. 
template class. Урок #41
NB: Я бы назвал это функций с шаблонами
*/

/*
Суть: 
Функция может принимать шаблон (это любой тип данных) и возвращать его
Функция может принимать 2 шаблон (это любой тип данных для каждого) и возвращать один из шаблонов
*/




// https://elearning.intra.42.fr/notions/piscine-c-d07-templates/subnotions
// лекция в Интре у французов 


#include <iostream>
#include <string>

// Сase 1
// template <typename T> // пишем без двоеточия. Объявление одного шаблона

// T Sum(T a, T b) // может работать только с одним типом данных. Если будут разные то не будет работать
// {
// 	return a + b; // нужна будет перегрузка оператора + // не потребовалась
// }



//Сase 2
// template <typename T1, typename T2> // работа с двумя типами данных. Объявление двух шаблонов

// T1 Sum(T1 a, T2 b) // может работать только с двумя типами данных. Но возвращать будет один тип
// {
// 	return a + b; // нужна будет перегрузка оператора + // не потребовалась
// }



//Сase 3
// template <typename T1, typename T2> // работа с двумя типами данных

// T1 Sum(T1 a, T2 b) //может работать только с двумя типами данных. Но возвращать будет один тип
// {
// 	return a + b; // нужна будет перегрузка оператора + // не потребовалась
// }


// Сase 4
template <class T3> // пишем без двоеточия (если пишем class, то все последующие переменные тоже пишем со словом class)
//class и typename одно и тоже, но нужно использовать что-то одно, нельзя писать и class и typename

T3 Sum(T3 a, T3 b) // здесь работаем с одним типом данных. Если будут разные типы при объявленном одном типе шаблона
// то не будет работать
{
	return a + b; // нужна будет перегрузка оператора + // не потребовалась
}

int main()
{
	std::cout << Sum(3, 5) << std::endl; // Case 1 или Case 2
	// for case 3
	// std::cout << Sum(3.4, 5) << std::endl;// CASE 3: отработка шаблона с двумя разными типами данных)
	return 0;
}