
/* https://www.youtube.com/watch?v=77H7aRy68P8&list=PLQOaTSbfxUtBm7DxblJZShqBQnBAVzlXX&index=5*/
// лекция на Simple Code
// Явный пример инкапсуляции (уровни доступа)


/* 
Модификаторы доступа классов.
 public private protected что это. 
 Спецификаторы доступа. C++ Урок #75
 */

#include <iostream>
// using namespace std;//если использовать пространство имен STD 
// /*то можно использовать string (это как char в С), cout cin без std::
// но если не использовать namespace то нужно будет приписывать к string
// принадлежность к классу std::string*/

class Human // это название класса // по сути это ТИП данных как инт и тд
{
public: // это модификатор доступа, без него нельзя обратиться к полям класса
	int age; // это свойство или поле класса
	int weight;
	std::string name;// это как char name in C
};

class Point
{
	// если не прописывать какой-либо модификатор доступа 
	// то он по умолчанию private
public: // доступен всем .в отличии от Java и С# модификатор доступа распространяется на все что ниже
			// пока не встретим другой модификатор
	int x;
	void Print()//это МЕТОД (в Си это функция)
	// этот метод стоит в поле доступа public и доступна всем(даже достает private protected в этом классе)
	// если этот метод засунуть в область модификатора private то в main к нему не будет доступа 
	{
		// std::cout << "x ="<< x <<"\ny = "<< y << "\nz =" << z << std::endl;
		std::cout << "x ="<< x <<"\ny = "<< y << std::endl;
		PrinY();// этот метод написан в private но вызывается он в public и поэтому доступен

	}

private: // недоступен извне, но доступен элементам внутри своего класса и дружественным классам// =protected но разница у private and protected в наследовании
	int y;
	// void Print()//это МЕТОД 
	// // если этот метод засунуть в область модификатора private то в main к нему не будет доступа 
	// {
	// 	std::cout << "x ="<< x <<"\ny = "<< y << "\nz =" << z << std::endl;
	// }
	void PrinY()//это МЕТОД 
	// если этот приватный метод засунуть в область модификатора public то в main к нему будет доступ 
	{
		std::cout << "y = "<< y << std::endl;
		std::cout << "PRINY()"<< std::endl;
	}



protected: // доступен в наследованных // =protected но разница у private and protected в наследовании
	int z;

};
int main() // Это хороший пример хранения данных о ком-либо (например о студентах) // Сергей использовал двумерный массив как альтернативу
{

	Point a; // доступ к private могут иметь только элементы самого класса или дружественные классы
//доступ к public можно обращаться через "."
	a.Print(); // если этот метод засунуть в область модификатора private то в main к нему не будет доступа 
	// но если этот приватный метод вызвать внутри публичного метода то можно вывести его значение (видео 13:11)




}