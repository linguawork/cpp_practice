
/* 
Ключевое слово this в ООП. 
Что означает. Что это такое. 
Для чего нужен this указатель C++ #81
*/

/*
Пример: если мы создаем два объекта одного класса, то в С++
каждому объекту присваивается адрес и this (это есть указатель на адрес объекта)
Обращение к полю или методу через "this->" по сути дает четкое указание на принадлежность
поля или метода к объекту в котором используется this ( ПО-русски "ТОЛЬКО В ЭТОМ ОБЪЕКТЕ")

Снаружи класса использовать указатель THIS нельзя
ТОЛЬКО внутри класса
*/

/* https://www.youtube.com/watch?v=2rv_s1j5pHE&list=PLQOaTSbfxUtBm7DxblJZShqBQnBAVzlXX&index=12 */
// лекция на Simple Code

#include <iostream>

class Point
{
private:
		int x; 
		int y;

public: //в этом классе два конструктора

		Point() //конструктор по умолчанию// не подаются никакие параметры
		// здесь можно вывести адрес THIS
		{
			x = 0;
			y = 0;
			std::cout << this << "\tprinting the address of constant\n pointer THIS in the default constructor" << std::endl; 
			
			//Зачем нужен THIS
			// 1.Он позволяет непосредственно иметь доступ к свойствам и методам объекта:
			this->Print(); // в некоторых версиях  VScode можно обращаться через "."
		}

		Point(int valueX, int valueY) //конструктор по умолчанию// не подаются никакие параметры
		// здесь можно вывести адрес THIS
		{
			x = valueX;
			y = valueY;
			std::cout << this << "\tprinting the address of constant\n pointer THIS in the NONdefault constructor" << std::endl; // это
			//константый указатель на объект
		}

		int GetY()
		{
			return y; 
		}

		void SetY (int y)// установить значение x
		// название устанавливаемого не должно совпадать с названием
		// приватного поля X, но обращение через this может решить эту проблему:
		// this делает различия м/у одноименными переменными 
		{
			this->y = y; // устанавливаем значение приватного поля x
		}
	

		int GetX() 
		{
			return x; 
		}

		void SetX (int valueX)// установить значение x
		//название устанавливаемого не должно совпадать с названием
		//приватного поля X
		{
			x = valueX; 
		}
	
		void Print()
		{
			std::cout << "X = " << x << "\tY =" << y << std::endl;
		}

};

int main() 
{

	Point a; // здесь будет запуск конструктора по умолчанию так как мы не подаем значения полей в объект
	a.SetY(5); // если в сеттере не писать this->y, то 5 не присвоится так как компилятор не сможет определить
	// какому Y мы присваиваем 5
	a.Print(); //распечатали адрес указателя THIS


	// Point b (4, 10); // здесь будет запуск конструктора НЕ по умолчанию так как я подаю значения полей в объект (4, 10)
	// b.Print(); //распечатали адрес указателя THIS
	return 0;
}