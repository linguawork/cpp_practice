/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   D00Ex02-1_211202_StaticMethods copy.cpp            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: areggie <areggie@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2021/12/02 17:34:58 by areggie           #+#    #+#             */
/*   Updated: 2022/04/29 21:34:52 by areggie          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

/*
источник https://ravesli.com/urok-125-staticheskie-metody-klassa/
*/

/* 
Урок №125. Статические методы класса
*/

#include <iostream>

/*
Если статические переменные-члены являются открытыми, 
то мы можем получить к ним доступ напрямую через имя 
класса и оператор разрешения области видимости.
*/

/*========= ВЫВОД значения статич переменной не через объект класса 
Открытые (публичные) переменные можно выводить не создавая объекта просто 
в явном виде через Anything::s_value

Поскольку статические методы не привязаны к определенному объекту, 
то их можно вызывать напрямую через имя класса и оператор разрешения 
области видимости, а также через объекты класса (но это не рекомендуется)


У статических методов есть две интересные особенности.

Во-первых, поскольку статические методы не привязаны к объекту, 
то они не имеют скрытого указателя *this! Здесь есть смысл, 
так как указатель *this всегда указывает на объект, 
с которым работает метод. 
Статические методы могут не работать через объект, 
поэтому и указатель *this не нужен.

Во-вторых, статические методы могут напрямую обращаться к другим статическим
членам (переменным или функциям), но не могут напрямую обращаться
к нестатическим членам. Это связано с тем, что нестатические члены 
принадлежат объекту класса, а статические методы — нет!
*/
class Anything
{
public:
    static int s_value;
 
};
 
int Anything::s_value = 3; // определение статического члена, без создания объекта
//так можно инициализировать статические переменные

// так же можно инициализировать приватную переменную ( но распечатать ее уже нельзя 
// а публичную можно)

 
int main()
{
	std::cout << Anything::s_value << '\n';
}